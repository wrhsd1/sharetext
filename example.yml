name: 构建安卓APK（备用方案）

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write  # 允许工作流创建releases和提交文件
  packages: read
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的提交历史
      
      # 获取最新的 commit message 并设置为版本号
      - name: 设置版本号
        run: |
          # 获取最新的 commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          # 检查 commit message 是否符合版本号格式 (x.y.z)
          if [[ $COMMIT_MSG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "版本号: $COMMIT_MSG"
            # 更新 pubspec.yaml 中的版本号
            sed -i "s/^version: .*/version: $COMMIT_MSG+1/" pubspec.yaml
            echo "已更新 pubspec.yaml 中的版本号为 $COMMIT_MSG"
          else
            echo "Commit message 不符合版本号格式，将使用默认版本号"
          fi
          
          # 显示更新后的版本号
          echo "当前版本号:"
          grep "^version: " pubspec.yaml

      - name: 检查文件结构
        run: |
          echo "检查代码仓库结构..."
          ls -la
          echo "检查files目录中的图标..."
          ls -la files/ || echo "files目录不存在"
          ls -la files/icon.png || echo "icon.png文件不存在"

      # 设置Java环境并缓存
      - name: 设置Java环境
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'

      # 设置Flutter环境并开启缓存
      - name: 设置Flutter环境
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      # 缓存Android目录结构和文件，避免每次重新创建
      - name: 缓存Android目录结构
        uses: actions/cache@v3
        id: cache-android-structure
        with:
          path: |
            android
          key: android-structure-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('.github/workflows/build_without_artifact.yml') }}
      
      # 如果缓存未命中，则创建所需的Android目录结构和文件
      - name: 准备Android目录和文件
        if: steps.cache-android-structure.outputs.cache-hit != 'true'
        run: |
          # 创建目录
          mkdir -p android/app/src/main/kotlin/com/example/ai_chat_app
          mkdir -p android/app/src/main/res/drawable
          mkdir -p android/app/src/main/res/values
          mkdir -p android/app/src/debug/res/values
          mkdir -p android/app/src/profile/res/values
          mkdir -p android/app/src/main/res/mipmap-mdpi
          mkdir -p android/app/src/main/res/mipmap-hdpi
          mkdir -p android/app/src/main/res/mipmap-xhdpi
          mkdir -p android/app/src/main/res/mipmap-xxhdpi
          mkdir -p android/app/src/main/res/mipmap-xxxhdpi
          
          # 复制图标
          mkdir -p files
          cp files/icon.png android/app/src/main/res/mipmap-mdpi/ic_launcher.png || echo "创建默认图标"
          cp files/icon.png android/app/src/main/res/mipmap-hdpi/ic_launcher.png || echo "创建默认图标"
          cp files/icon.png android/app/src/main/res/mipmap-xhdpi/ic_launcher.png || echo "创建默认图标"
          cp files/icon.png android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png || echo "创建默认图标"
          cp files/icon.png android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png || echo "创建默认图标"
          
          # 创建所需的代码和配置文件
          cat << 'END_OF_FILE' > android/app/src/main/kotlin/com/example/ai_chat_app/MainActivity.kt
          package com.example.ai_chat_app
          import io.flutter.embedding.android.FlutterActivity
          class MainActivity: FlutterActivity() {
          }
          END_OF_FILE
          
          # 创建资源文件
          cat << 'END_OF_FILE' > android/app/src/main/res/values/styles.xml
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
                  <item name="android:windowBackground">@drawable/launch_background</item>
              </style>
              <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
                  <item name="android:windowBackground">?android:colorBackground</item>
              </style>
          </resources>
          END_OF_FILE
          
          # 其他资源文件
          cat << 'END_OF_FILE' > android/app/src/main/res/drawable/launch_background.xml
          <?xml version="1.0" encoding="utf-8"?>
          <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
              <item android:drawable="@android:color/white" />
          </layer-list>
          END_OF_FILE
          
          cp android/app/src/main/res/values/styles.xml android/app/src/debug/res/values/
          cp android/app/src/main/res/values/styles.xml android/app/src/profile/res/values/
          
          # 创建Android构建配置文件
          cat << 'END_OF_FILE' > android/build.gradle
          buildscript {
              ext.kotlin_version = '1.7.10'
              repositories {
                  google()
                  mavenCentral()
              }
          
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.3.0'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }
          
          tasks.register("clean", Delete) {
              delete rootProject.buildDir
          }
          END_OF_FILE
          
          # settings.gradle
          cat << 'END_OF_FILE' > android/settings.gradle
          include ':app'
          
          def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
          def properties = new Properties()
          
          assert localPropertiesFile.exists()
          localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
          
          def flutterSdkPath = properties.getProperty("flutter.sdk")
          assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
          apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
          END_OF_FILE
          
          # local.properties
          echo "flutter.sdk=/opt/hostedtoolcache/flutter/stable-3.10.0-x64" > android/local.properties
          
          # gradle.properties
          cat << 'END_OF_FILE' > android/gradle.properties
          org.gradle.jvmargs=-Xmx1536M
          android.useAndroidX=true
          android.enableJetifier=true
          END_OF_FILE
          
          # gradle-wrapper.properties
          mkdir -p android/gradle/wrapper
          cat << 'END_OF_FILE' > android/gradle/wrapper/gradle-wrapper.properties
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-all.zip
          END_OF_FILE
          
          # AndroidManifest.xml
          cat << 'END_OF_FILE' > android/app/src/main/AndroidManifest.xml
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.example.ai_chat_app">
              <!-- 添加网络权限 -->
              <uses-permission android:name="android.permission.INTERNET" />
          
              <application
                  android:label="AI助手"
                  android:name="${applicationName}"
                  android:icon="@mipmap/ic_launcher">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop"
                      android:theme="@style/LaunchTheme"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
                      android:hardwareAccelerated="true"
                      android:windowSoftInputMode="adjustResize">
                      <meta-data
                        android:name="io.flutter.embedding.android.NormalTheme"
                        android:resource="@style/NormalTheme"
                        />
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
                  <meta-data
                      android:name="flutterEmbedding"
                      android:value="2" />
              </application>
          </manifest>
          END_OF_FILE
          
          # 创建应用级build.gradle
          cat << 'END_OF_FILE' > android/app/build.gradle
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }
          
          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
          }
          
          def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
          if (flutterVersionCode == null) {
              flutterVersionCode = '1'
          }
          
          def flutterVersionName = localProperties.getProperty('flutter.versionName')
          if (flutterVersionName == null) {
              flutterVersionName = '1.0'
          }
          
          // 添加签名配置
          def keystoreProperties = new Properties()
          def keystorePropertiesFile = rootProject.file('key.properties')
          if (keystorePropertiesFile.exists()) {
              keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
          }
          
          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'
          apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
          
          android {
              compileSdkVersion flutter.compileSdkVersion
              ndkVersion flutter.ndkVersion
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              kotlinOptions {
                  jvmTarget = '1.8'
              }
          
              sourceSets {
                  main.java.srcDirs += 'src/main/kotlin'
              }
          
              defaultConfig {
                  applicationId "com.example.ai_chat_app"
                  minSdkVersion flutter.minSdkVersion
                  targetSdkVersion flutter.targetSdkVersion
                  versionCode flutterVersionCode.toInteger()
                  versionName flutterVersionName
              }
          
              // 添加签名配置
              signingConfigs {
                  release {
                      if (keystorePropertiesFile.exists()) {
                          keyAlias keystoreProperties['keyAlias']
                          keyPassword keystoreProperties['keyPassword']
                          storeFile file(keystoreProperties['storeFile'])
                          storePassword keystoreProperties['storePassword']
                      }
                  }
              }
          
              buildTypes {
                  release {
                      signingConfig keystorePropertiesFile.exists() ? signingConfigs.release : signingConfigs.debug
                      minifyEnabled true
                      shrinkResources true
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }
          }
          
          flutter {
              source '../..'
          }
          
          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
          }
          END_OF_FILE
          
          # 创建ProGuard规则
          cat << 'END_OF_FILE' > android/app/proguard-rules.pro
          ## Flutter wrapper
          -keep class io.flutter.app.** { *; }
          -keep class io.flutter.plugin.**  { *; }
          -keep class io.flutter.util.**  { *; }
          -keep class io.flutter.view.**  { *; }
          -keep class io.flutter.**  { *; }
          -keep class io.flutter.plugins.**  { *; }
          -keep class io.flutter.embedding.** { *; }
          
          ## Gson specific rules
          -keepattributes Signature
          -keepattributes *Annotation*
          -dontwarn sun.misc.**
          -keep class com.google.gson.** { *; }
          
          ## HTTP / API related
          -dontwarn retrofit.**
          -keep class retrofit.** { *; }
          -keepattributes Signature
          -keepattributes Exceptions
          -dontwarn okhttp3.**
          -keep class okhttp3.** { *; }
          -dontwarn okio.**
          -keep class okio.** { *; }
          
          ## 保留模型类
          -keep class com.example.ai_chat_app.providers.** { *; }
          -keep class com.example.ai_chat_app.services.** { *; }
          END_OF_FILE
      
      # 缓存Flutter依赖
      - name: 缓存Flutter依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
            .flutter-plugins
            .flutter-plugins-dependencies
            build
          key: flutter-deps-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-

      - name: 获取依赖
        run: flutter pub get
        
      # 提取提交信息和版本号
      - name: 提取提交信息和版本号
        id: commit_info
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_NUMBER=${{ github.run_number }}
          echo "COMMIT_MESSAGE=${COMMIT_MSG}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          echo "VERSION_NAME=1.0.${BUILD_NUMBER}-${COMMIT_HASH}" >> $GITHUB_ENV
          echo "version_name=1.0.${BUILD_NUMBER}-${COMMIT_HASH}" >> $GITHUB_OUTPUT
          echo "commit_message=${COMMIT_MSG}" >> $GITHUB_OUTPUT
          
      # 更新版本信息到Flutter应用
      - name: 更新版本信息
        run: |
          sed -i "s/flutterVersionCode = '1'/flutterVersionCode = '${{ github.run_number }}'/g" android/app/build.gradle
          sed -i "s/flutterVersionName = '1.0'/flutterVersionName = '${{ env.VERSION_NAME }}'/g" android/app/build.gradle
      
      # 设置签名秘钥
      - name: 设置密钥属性
        run: |
          mkdir -p android/app
          if [[ -n "${{ secrets.KEYSTORE_BASE64 }}" && -n "${{ secrets.STORE_PASSWORD }}" && -n "${{ secrets.KEY_ALIAS }}" ]]; then
            echo "使用提供的签名密钥..."
            echo "storePassword=${{ secrets.STORE_PASSWORD }}" > android/key.properties
            # 如果KEY_PASSWORD未设置，则使用STORE_PASSWORD
            if [[ -n "${{ secrets.KEY_PASSWORD }}" ]]; then
              echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
            else
              echo "keyPassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
            fi
            echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
            echo "storeFile=../app/keystore.jks" >> android/key.properties
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
            echo "IS_SIGNED=true" >> $GITHUB_ENV
          else
            echo "未提供签名密钥，使用调试密钥..."
            echo "IS_SIGNED=false" >> $GITHUB_ENV
            # 创建一个调试用的key.properties
            echo "storePassword=android" > android/key.properties
            echo "keyPassword=android" >> android/key.properties
            echo "keyAlias=androiddebugkey" >> android/key.properties
            echo "storeFile=debug.keystore" >> android/key.properties
            # 创建一个调试用的keystore
            keytool -genkey -v -keystore android/app/debug.keystore -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Android Debug,O=Android,C=US"
          fi

      # 使用Gradle缓存来加速构建
      - name: 设置Gradle缓存
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: 构建APK (禁用图标树摇)
        run: flutter build apk --release --no-tree-shake-icons

      # 直接创建一个GitHub Release而不使用artifacts
      - name: 创建临时发布用于存储APK
        id: create_release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.run_number }}
          name: 自动构建 ${{ env.VERSION_NAME }}
          files: build/app/outputs/flutter-apk/app-release.apk
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: true
          body: |
            这是GitHub Actions自动构建的APK。
            版本: ${{ env.VERSION_NAME }}
            构建时间: ${{ github.event.repository.updated_at }}
            提交信息: ${{ env.COMMIT_MESSAGE }}
            签名状态: ${{ env.IS_SIGNED == 'true' && '已签名' || '使用调试密钥签名' }}
            
            您可以从此页面下载APK文件。