name: Build Flutter APK

on:
  push:
    branches:
      - main # Or your default branch
  pull_request:
    branches:
      - main # Or your default branch
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write  # 允许创建 release 和上传文件
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的提交历史

      # 提取提交信息和版本号
      - name: Extract version info
        id: version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_NUMBER=${{ github.run_number }}
          echo "COMMIT_MESSAGE=${COMMIT_MSG}" >> $GITHUB_ENV
          echo "VERSION_NAME=1.0.${BUILD_NUMBER}-${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.3'
          cache: true
          
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: |
          echo y | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list
          
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
            .flutter-plugins
            .flutter-plugins-dependencies
            build
          key: flutter-deps-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-

      - name: Get Flutter dependencies
        run: |
          flutter pub get
          # 显示已安装的依赖版本
          cat pubspec.lock

      - name: Debug Flutter info
        run: |
          flutter doctor -v
          flutter --version
          dart --version

      - name: Analyze Flutter code
        run: flutter analyze || true  # 即使分析失败也继续执行

      - name: Set up Gradle cache
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Fix Android build configuration
        run: |
          # 设置工作目录
          cd "$GITHUB_WORKSPACE"
          
          # 修复插件配置
          flutter clean
          flutter pub get
          
          # 设置插件路径
          PLUGIN_PATH="$HOME/.pub-cache/hosted/pub.dev/receive_sharing_intent-1.4.5/android"
          echo "Looking for plugin in: $PLUGIN_PATH"
          
          if [ ! -d "$PLUGIN_PATH" ]; then
            echo "Searching for plugin directory..."
            find $HOME/.pub-cache -name "receive_sharing_intent*" -type d
            exit 1
          fi

          # 修复插件配置
          echo "Fixing plugin build configuration..."
          
          # 修复 AndroidManifest.xml
          MANIFEST_PATH="$PLUGIN_PATH/src/main/AndroidManifest.xml"
          if [ -f "$MANIFEST_PATH" ]; then
            cp "$MANIFEST_PATH" "${MANIFEST_PATH}.bak"
            sed -i 's/package="[^"]*"//' "$MANIFEST_PATH"
            echo "Fixed AndroidManifest.xml"
          fi
          
          # 更新插件的 build.gradle
          echo "Updating plugin build.gradle..."
          cat > "$PLUGIN_PATH/build.gradle" << 'EOF'
plugins {
    id 'com.android.library'
}

android {
    namespace "com.kasem.receive_sharing_intent"
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 33
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}
EOF

          # 设置应用配置
          echo "Setting up app configuration..."
          mkdir -p android/app
          
          # 创建应用的 build.gradle.kts
          cat > "android/app/build.gradle.kts" << 'EOF'
plugins {
    id("com.android.application")
    kotlin("android")
    id("dev.flutter.flutter-gradle-plugin")
}

android {
    namespace = "com.example.simple_text_saver"
    compileSdk = 33
    ndkVersion = "27.0.12077973"

    defaultConfig {
        applicationId = "com.example.simple_text_saver"
        minSdk = 16
        targetSdk = 33
        versionCode = 1
        versionName = "1.0"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10")
}

flutter {
    source = ".."
}
EOF
            echo ''
            echo 'android {'
            echo '    namespace = "com.example.simple_text_saver"'
            echo '    compileSdk = 33'
            echo '    ndkVersion = "27.0.12077973"'
            echo ''
            echo '    defaultConfig {'
            echo '        applicationId = "com.example.simple_text_saver"'
            echo '        minSdk = 16'
            echo '        targetSdk = 33'
            echo '        versionCode = 1'
            echo '        versionName = "1.0"'
            echo '    }'
            echo ''
            echo '    buildTypes {'
            echo '        release {'
            echo '            isMinifyEnabled = false'
            echo '            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")'
            echo '        }'
            echo '    }'
            echo ''
            echo '    compileOptions {'
            echo '        sourceCompatibility = JavaVersion.VERSION_11'
            echo '        targetCompatibility = JavaVersion.VERSION_11'
            echo '    }'
            echo ''
            echo '    kotlinOptions {'
            echo '        jvmTarget = JavaVersion.VERSION_11.toString()'
            echo '    }'
            echo '}'
            echo ''
            echo 'dependencies {'
            echo '    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10")'
            echo '}'
            echo ''
            echo 'flutter {'
            echo '    source = ".."'
            echo '}'
          
          # 继续添加应用配置
          echo '' >> "android/app/build.gradle.kts"
          echo 'android {' >> "android/app/build.gradle.kts"
          echo '    namespace = "com.example.simple_text_saver"' >> "android/app/build.gradle.kts"
          echo '    compileSdk = 33' >> "android/app/build.gradle.kts"
          echo '    ndkVersion = "27.0.12077973"' >> "android/app/build.gradle.kts"
          echo '' >> "android/app/build.gradle.kts"
          echo '    defaultConfig {' >> "android/app/build.gradle.kts"
          echo '        applicationId = "com.example.simple_text_saver"' >> "android/app/build.gradle.kts"
          echo '        minSdk = 16' >> "android/app/build.gradle.kts"
          echo '        targetSdk = 33' >> "android/app/build.gradle.kts"
          echo '        versionCode = 1' >> "android/app/build.gradle.kts"
          echo '        versionName = "1.0"' >> "android/app/build.gradle.kts"
          echo '    }' >> "android/app/build.gradle.kts"
          echo '' >> "android/app/build.gradle.kts"
          echo '    buildTypes {' >> "android/app/build.gradle.kts"
          echo '        release {' >> "android/app/build.gradle.kts"
          echo '            isMinifyEnabled = false' >> "android/app/build.gradle.kts"
          echo '            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")' >> "android/app/build.gradle.kts"
          echo '        }' >> "android/app/build.gradle.kts"
          echo '    }' >> "android/app/build.gradle.kts"
          echo '' >> "android/app/build.gradle.kts"
          echo '    compileOptions {' >> "android/app/build.gradle.kts"
          echo '        sourceCompatibility = JavaVersion.VERSION_11' >> "android/app/build.gradle.kts"
          echo '        targetCompatibility = JavaVersion.VERSION_11' >> "android/app/build.gradle.kts"
          echo '    }' >> "android/app/build.gradle.kts"
          echo '' >> "android/app/build.gradle.kts"
          echo '    kotlinOptions {' >> "android/app/build.gradle.kts"
          echo '        jvmTarget = JavaVersion.VERSION_11.toString()' >> "android/app/build.gradle.kts"
          echo '    }' >> "android/app/build.gradle.kts"
          echo '}' >> "android/app/build.gradle.kts"
          echo '' >> "android/app/build.gradle.kts"
          echo 'dependencies {' >> "android/app/build.gradle.kts"
          echo '    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10")' >> "android/app/build.gradle.kts"
          echo '}' >> "android/app/build.gradle.kts"
          echo '' >> "android/app/build.gradle.kts"
          echo 'flutter {' >> "android/app/build.gradle.kts"
          echo '    source = ".."' >> "android/app/build.gradle.kts"
          echo '}' >> "android/app/build.gradle.kts"
          
          # 创建项目级别的 build.gradle.kts
          cat > "android/build.gradle.kts" << 'EOF'
buildscript {
    extra["kotlin_version"] = "1.6.10"

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:7.3.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${extra["kotlin_version"]}")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}
EOF
          echo '' >> "android/build.gradle.kts"
          echo '    repositories {' >> "android/build.gradle.kts"
          echo '        google()' >> "android/build.gradle.kts"
          echo '        mavenCentral()' >> "android/build.gradle.kts"
          echo '    }' >> "android/build.gradle.kts"
          echo '' >> "android/build.gradle.kts"
          echo '    dependencies {' >> "android/build.gradle.kts"
          echo '        classpath("com.android.tools.build:gradle:7.3.0")' >> "android/build.gradle.kts"
          echo '        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${extra[\\"kotlin_version\\"]}")' >> "android/build.gradle.kts"
          echo '    }' >> "android/build.gradle.kts"
          echo '}' >> "android/build.gradle.kts"
          echo '' >> "android/build.gradle.kts"
          echo 'allprojects {' >> "android/build.gradle.kts"
          echo '    repositories {' >> "android/build.gradle.kts"
          echo '        google()' >> "android/build.gradle.kts"
          echo '        mavenCentral()' >> "android/build.gradle.kts"
          echo '    }' >> "android/build.gradle.kts"
          echo '}' >> "android/build.gradle.kts"
          echo '' >> "android/build.gradle.kts"
          echo 'tasks.register("clean", Delete::class) {' >> "android/build.gradle.kts"
          echo '    delete(rootProject.buildDir)' >> "android/build.gradle.kts"
          echo '}'  >> "android/build.gradle.kts"
            echo ''
            echo '    repositories {'
            echo '        google()'
            echo '        mavenCentral()'
            echo '    }'
            echo ''
            echo '    dependencies {'
            echo '        classpath("com.android.tools.build:gradle:7.3.0")'
            echo '        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${extra[\\"kotlin_version\\"]}")'
            echo '    }'
            echo '}'
            echo ''
            echo 'allprojects {'
            echo '    repositories {'
            echo '        google()'
            echo '        mavenCentral()'
            echo '    }'
            echo '}'
            echo ''
            echo 'tasks.register("clean", Delete::class) {'
            echo '    delete(rootProject.buildDir)'
            echo '}'
          } > "android/build.gradle.kts"

          # 确保本地属性文件存在
          echo "flutter.sdk=$FLUTTER_HOME" > android/local.properties
          echo "sdk.dir=$ANDROID_SDK_ROOT" >> android/local.properties
          
          # 确保本地配置正确
          echo "flutter.sdk=$FLUTTER_HOME" > android/local.properties
          echo "sdk.dir=$ANDROID_SDK_ROOT" >> android/local.properties
          
          # 显示配置信息
          echo "===== Environment Info ====="
          echo "FLUTTER_HOME: $FLUTTER_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "===== Directory Structure ====="
          ls -la android/
          echo "===== Build Files ====="
          echo "android/build.gradle.kts:"
          cat android/build.gradle.kts
          echo "android/app/build.gradle.kts:"
          cat android/app/build.gradle.kts
          echo "===== Plugin Files ====="
          echo "Plugin build.gradle:"
          cat "$PLUGIN_PATH/build.gradle"
          echo "Plugin AndroidManifest.xml:"
          cat "$MANIFEST_PATH"

      - name: Build APK
        run: |
          cd "$GITHUB_WORKSPACE"
          
          # 尝试构建
          flutter build apk --release --no-tree-shake-icons

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          tag_name: build-${{ github.run_number }}
          name: Build ${{ env.VERSION_NAME }}
          files: build/app/outputs/flutter-apk/app-release.apk
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: true
          body: |
            Automated build from GitHub Actions
            Version: ${{ env.VERSION_NAME }}
            Build Time: ${{ github.event.repository.updated_at }}
            Commit Message: ${{ env.COMMIT_MESSAGE }}

